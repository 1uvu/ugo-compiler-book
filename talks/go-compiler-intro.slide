
# Go编译器定制简介

chai2010
chaishushan@gmail.com
https://github.com/chai2010/ugo-compiler-book

// 感谢 Go+ 社区的支持

// -----------------------------------------------------------------------------

## 自我介绍(chai2010)

- 凹(Wa)语言作者(设计中...)
- Go代码贡献者([golang](https://github.com/golang/go/commits?author=chai2010), [go.image](https://github.com/golang/image/commits?author=chai2010))
- 蚂蚁集团从事云原生、蚂蚁链DSL语言设计和研发工作([招贤纳士](https://github.com/chai2010/ugo-compiler-book/blob/master/jobs.md))
- [《µGo语言实现(从头开发一个迷你Go语言编译器)》](https://github.com/chai2010/ugo-compiler-book) 作者
- [《Go语法树入门(出版名:Go语言定制指南)》](https://github.com/chai2010/go-ast-book) 作者
- [《Go语言高级编程》](https://github.com/chai2010/advanced-go-programming-book) 作者

.image go-compiler-intro/images/chai2010.png

## 我的图书(原创)

.image go-compiler-intro/images/mybooks-01.png 580 800

## 我的图书(翻译)

.image go-compiler-intro/images/mybooks-02.png


// -----------------------------------------------------------------------------
## 主题大纲
// -----------------------------------------------------------------------------

## 主题大纲

- 最简编译器
- 编译器后门八卦
- Go和Rust的选择
- Go衍生的语言
- Go语法树
- Go类型系统
- SSA和LLVM
- µGo案例
- 参考链接

// -----------------------------------------------------------------------------
## 最简编译器
// -----------------------------------------------------------------------------

## 编译器是什么

- 编译器是一种精确的翻译程序
- 编译器输入的是数据序列, 输出的也是数据序列
- 编译器作为可执行程序可用于 AOT 翻译, 类似 `gcc` 命令
- 编译器也可以是一个函数, 用于 JIT 运行时翻译, 或者包装为 AOT 翻译命令
- 编译器一般是某种编程语言的翻译程序, 因此也就包含了编程语言的外延
- 现代编程语言不仅仅是翻译, 还有内置的运行时调度
- 编译器可以很复杂, 甚至可以内置 OS ...

## 人肉编译器

将一个整数编译为一个程序, 程序的返回值返回这个整数值

比如 `42` 翻译为以下的 C 语言程序:

.code go-compiler-intro/code/01-1/main.c /int/,/}/

也可以翻译为以下的 X86 汇编程序:

.code go-compiler-intro/code/01-1/_main.s

也可以翻译为 LLVM 跨平台的汇编程序:

.code go-compiler-intro/code/01-1/main.ll

## Go程序替代人肉编译器

Go语言重新实现如下人肉编译器:

.code go-compiler-intro/code/01-2/main.go /func main/,

编译 `echo 123 | go run main.go`, 执行 `./a.out`, 看结果 `echo $?`

## 挑战: 继续前进一小步

- 输入的数字变为支持加/减/乘/除法和小括弧的表达式(词法+语法解析)
- 输出 X86 汇编时如何处理多个中间结果?
- 如何简化优先级的处理?

// -----------------------------------------------------------------------------
## 编译器后门八卦
// -----------------------------------------------------------------------------

## Reflections on Trusting Trust - 01 - 自重写程序

.image go-compiler-intro/images/02-trust1.jpg 500 850

.caption `s` 是从最后一个 `0` 到结尾的内容, 第1个 printf 打印 `s` 数组, 第2个打印后面部分

## Reflections on Trusting Trust - 02 - 鸡和蛋问题

.image go-compiler-intro/images/02-trust2.jpg 500 850

.caption C编译器为了支持转义的自举过程

## Reflections on Trusting Trust - 03 - 潜伏的后门

.image go-compiler-intro/images/02-trust3.jpg 500 850

.caption Ken 在C编译器植入后门后擦除记录, 同时在UNIX保留伪装的后门代码

## 更多的自重写代码

可能是最短的C自重写代码:

.code go-compiler-intro/code/02-04/_quine.c

[rsc](https://research.swtch.com/zip) 给了Go的版本(Go已经自举, 大家可以放心用了):

.code go-compiler-intro/code/02-04/main.go


// -----------------------------------------------------------------------------
## Go和Rust的选择
// -----------------------------------------------------------------------------

## Go和Rust的选择

TODO


// -----------------------------------------------------------------------------
## Go衍生的语言
// -----------------------------------------------------------------------------

## Go衍生的语言

TODO


// -----------------------------------------------------------------------------
## Go语法树
// -----------------------------------------------------------------------------

## Go语法树

TODOå

// -----------------------------------------------------------------------------
## Go类型系统
// -----------------------------------------------------------------------------

## Go类型系统

TODO

// -----------------------------------------------------------------------------
## SSA和LLVM
// -----------------------------------------------------------------------------

## SSA和LLVM

TODO

// -----------------------------------------------------------------------------
## µGo案例
// -----------------------------------------------------------------------------

## µGo案例

TODO

// -----------------------------------------------------------------------------
## 参考链接
// -----------------------------------------------------------------------------

## 参考链接

- [https://www.sigbus.info/compilerbook](https://www.sigbus.info/compilerbook)
- [Reflections on Trusting Trust - by Ken Thompson](http://cm.bell-labs.co/who/ken/trust.html)

// -----------------------------------------------------------------------------

## Q&A

// -----------------------------------------------------------------------------
// by chaishushan{TA}gmail.com
